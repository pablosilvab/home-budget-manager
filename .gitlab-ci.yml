variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  GIT_DEPTH: "0" 

stages:
  - install
  - test
  - coverage
  - sonarcloud-check
  - deploy

image: node:16

install:
  stage: install
  script:
    - npm install
  artifacts:
    paths:
      - node_modules/
    expire_in: 1h
  only:
    - main

test:
  stage: test
  dependencies:
    - install
  script:
    - npx jest --coverage
  artifacts:
    paths:
      - coverage/
    expire_in: 1h
  only:
    - main

coverage:
  stage: coverage
  script:
    - npm run test:cov
  artifacts:
    paths:
      - coverage/
  only:
    - main

sonarcloud-check:
  stage: sonarcloud-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - main

deploy:
  stage: deploy
  image: curlimages/curl:latest
  script:
    - echo "Iniciando despliegue en Render..."
    # Realiza la solicitud al webhook y guarda la respuesta
    - DEPLOY_RESPONSE=$(curl -s "${RENDER_DEPLOY_URL}")
    - echo "Respuesta del webhook: $DEPLOY_RESPONSE"
    
    # Extrae el ID del despliegue de la respuesta (si Render lo incluye)
    - DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id')
    - echo "ID del despliegue: $DEPLOY_ID"

    # Revisa periódicamente el estado del despliegue
    - echo "Esperando a que finalice el despliegue..."
    - |
      while true; do
        DEPLOY_STATUS=$(curl -s "https://api.render.com/v1/deploys/$DEPLOY_ID" | jq -r '.status')
        echo "Estado del despliegue: $DEPLOY_STATUS"
        if [ "$DEPLOY_STATUS" == "live" ]; then
          echo "El despliegue fue exitoso."
          break
        elif [ "$DEPLOY_STATUS" == "failed" ]; then
          echo "El despliegue falló."
          exit 1
        else
          echo "Esperando 10 segundos antes de volver a verificar..."
          sleep 10
        fi
      done
  only:
    - main
  when: on_success
